DOCKER_HOST_IP="172.31.254.1"

if [ "${BASH_SOURCE-}" = "$0" ]; then
    echo "You must source this script: \$ source $0" >&2
    exit 33
fi

bundle-exit () {
    if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
        PS1="$_OLD_VIRTUAL_PS1"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi
}

# reset bundle enveronments
bundle-exit

############################################################

source .env

DOCKER_COMPOSE="sudo /usr/bin/docker compose -p ${PROJECT_NAME}"
DOCKER_COMPOSE_CRON="${DOCKER_COMPOSE} -f ${ERP_BASE_DIR}/compose.yaml --env-file ${ERP_BASE_DIR}/.env"
alias docker_compose="${DOCKER_COMPOSE}"

# Change prompt
_OLD_VIRTUAL_PS1="${PS1-}"
if [ "x" != x ] ; then
    PS1="${PS1-}"
else
    PS1="${PROJECT_NAME} ${PS1-}"
fi
export PS1

## POSTGRESQL
alias psql="${DOCKER_COMPOSE} exec postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
alias database-postgis-update="${DOCKER_COMPOSE} exec postgres update-postgis.sh"
alias database-backup="${DOCKER_COMPOSE} exec postgres pg_dump -U ${POSTGRES_USER} --no-acl -Fp -Z 5 ${POSTGRES_DB}"
alias database-backup-to-file="database-backup | sudo tee ${ERP_BASE_DIR}/data/backup/userside_db_$(date "+%Y-%m-%d_%H-%M").sql.gz > /dev/null"
database-restore () {
  if file --mime-type "$1" | grep -q gzip$; then
    gunzip < $1 | ${DOCKER_COMPOSE} exec -T postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}
  else
    cat $1 | ${DOCKER_COMPOSE} exec -T postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}
  fi
}

## BACKUP
backup-make () {
    database-backup-to-file
    ${DOCKER_COMPOSE} run --rm php /app/backup.sh
}

## CRON
# If you need edit base cron file, do it here!
cron-create () {
    sudo tee /etc/cron.d/${PROJECT_NAME} > /dev/null <<EOT
# DO NOT EDIT THIS FILE !!!
#
# If you need to change this, fix it in ${ERP_BASE_DIR}/bundle.bash:
#   cd ${ERP_BASE_DIR}
#   nano bundle.bash
#   source bundle.bash
#   cron-create
#
# DO NOT EDIT THIS FILE !!!

* * * * *    root    ${DOCKER_COMPOSE_CRON} run --rm --no-TTY php php run cron > /dev/null
1 3 * * *    root    ${DOCKER_COMPOSE_CRON} exec --no-TTY postgres pg_dump -U ${POSTGRES_USER} --no-acl -Fp -Z 5 ${POSTGRES_DB} > ${ERP_BASE_DIR}/data/backup/userside_db_\$(date "+\%Y-\%m-\%d_\%H-\%M").sql.gz
9 3 * * *    root    ${DOCKER_COMPOSE_CRON} run --rm --no-TTY php /app/backup.sh
# usm_billing if needed (uncomment in bundle.bash if needed).
#*/10 * * * *   root    ${DOCKER_COMPOSE_CRON} run --rm usm_billing > /dev/null
EOT
}
alias cron-remove="sudo rm -f /etc/cron.d/${PROJECT_NAME}"
alias cron-run="${DOCKER_COMPOSE} run --rm php php run cron"

## RABBITMQ
alias rabbitmqctl="${DOCKER_COMPOSE} exec rabbitmq rabbitmqctl $1"
rabbitmq-create-stomp-user () {
    read -p "WebSocket username: " -r STOMP_USER
    read -p "WebSocket password: " -s -r STOMP_PASSWORD
    rabbitmqctl add_user "${STOMP_USER}" "${STOMP_PASSWORD}"
    rabbitmqctl set_permissions -p "/" "${STOMP_USER}" "^userside-stomp:id-.*" "" "^userside-stomp:id-.*"
    echo
    echo "Done"
}

## INSTALLER
alias erp-install="${DOCKER_COMPOSE} run --rm php /app/userside_install.sh install"
alias erp-repair="${DOCKER_COMPOSE} run --rm php /app/userside_install.sh repair"
alias erp-stability="${DOCKER_COMPOSE} run --rm php /app/userside_install.sh config --stability=$1"

## USERSIDE COMMANDS
alias erp-flush-cache="${DOCKER_COMPOSE} run --rm php php run cache/flush-all"
alias erp-migrate="${DOCKER_COMPOSE} run --rm php php run migrate/up --interactive=0"

## DOCKER SERVICE COMMANDS
awaiting_postgres_tobe_ready() {
  echo -n "Waiting for PostgreSQL."
  until
    echo -n "."
    ${DOCKER_COMPOSE} exec -T postgres pg_isready -U ${POSTGRES_USER} --timeout=0 -d ${POSTGRES_DB} -q > /dev/null 2>&1
  do sleep 1; done
  echo "ready!"
  sleep 1
}

awaiting_rabbitmq_tobe_ready() {
  echo -n "Waiting for RabbitMQ."
  until
    echo -n "."
    curl -f http://${DOCKER_HOST_IP}:15672 > /dev/null 2>&1
  do sleep 2; done
  echo "ready!"
  sleep 1
}

#########
## BUNDLE
bundle-start () {
    ${DOCKER_COMPOSE} up -d
    cron-create
    awaiting_postgres_tobe_ready
    awaiting_rabbitmq_tobe_ready
}
bundle-stop () {
    cron-remove
    ${DOCKER_COMPOSE} stop
}
alias bundle-restart="bundle-stop && bundle-start"
alias bundle-logs="${DOCKER_COMPOSE} logs -f $1"
alias bundle-pull="${DOCKER_COMPOSE} pull"

bundle-install () {
    fail() { : "${__fail_fast:?$1}"; }
    sudo mkdir -p ${ERP_BASE_DIR}/data/db ${ERP_BASE_DIR}/data/backup ${ERP_BASE_DIR}/data/userside
    sudo mkdir -p ${ERP_BASE_DIR}/data/userside/var/attachments ${ERP_BASE_DIR}/data/userside/var/cache ${ERP_BASE_DIR}/data/userside/var/log
    sudo mkdir -p ${ERP_BASE_DIR}/data/userside/var/log/usm_billing
    sudo chmod -R u=rwX,g=rwX,o=rwX ${ERP_BASE_DIR}/data/userside/var

    test -f ${ERP_BASE_DIR}/data/userside/.env || echo "" | sudo tee ${ERP_BASE_DIR}/data/userside/.env > /dev/null

    if [[ ! -f ${ERP_BASE_DIR}/data/userside/installer.json ]]; then
        sudo tee ${ERP_BASE_DIR}/data/userside/installer.json > /dev/null <<EOT
{
  "pgsql_dsn": "pgsql:host=postgres;dbname=${POSTGRES_DB};port=5432;username=${POSTGRES_USER};password=${POSTGRES_PASSWORD}",
  "redis_url": "redis://${REDIS_PASSWORD}@redis",
  "rabbit_url": "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/%2f",
  "stability": "stable"
}
EOT
    fi

    bundle-start || fail "Error"
    database-postgis-update > /dev/null || fail "Error"
    erp-install || fail "Error"
    cron-create || fail "Error"
    bundle-restart || fail "Error"
    cron-run
}

bundle-update () {
    fail() { : "${__fail_fast:?$1}"; }
    if [[ $1 == 'force' ]];
    then
        sudo rm data/userside/.installer/crash.txt
    fi
    backup-make || fail "Error"
    bundle-stop || fail "Error"
    bundle-pull || fail "Error"
    cron-remove || fail "Error"
    bundle-install || fail "Error"
}

bundle-destroy () {
    read -p "This action will DELETE all data of ${PROJECT_NAME}! Are you sure? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        ${DOCKER_COMPOSE} down -v --remove-orphans
    fi
}

alias bundle-purge="bundle-destroy && sudo rm --rf ${ERP_BASE_DIR}/data/userside ${ERP_BASE_DIR}/data/db"
