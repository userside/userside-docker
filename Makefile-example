include .env
export

#####################################################################

up: bundle-up
down: bundle-stop
stop: bundle-stop
restart: down up
install: create-init-dirs-and-files bundle-up us-install cron-setup cron-run need-restart
userside-install: us-install
userside-repair: us-repair
update: backup us-cache-flush bundle-stop bundle-pull cron-remove install postgres-postgis-update
uninstall: bundle-destroy cron-remove
log: bundle-logs
flush: us-cache-flush

#####################################################################

bundle-up:
	docker-compose -p ${PROJECT_NAME} up -d --scale core-worker=${CORE_WORKER_NUM} --scale poller=${POLLER_NUM}

bundle-stop:
	docker-compose -p ${PROJECT_NAME} stop

bundle-destroy: confirmation
	docker-compose -p ${PROJECT_NAME} down -v --remove-orphans

bundle-logs:
	docker-compose -p ${PROJECT_NAME} logs -f

bundle-pull:
	docker-compose -p ${PROJECT_NAME} pull

####

create-init-dirs-and-files:
	mkdir -p ${USERSIDE_BASE_DIR}/db ${USERSIDE_BASE_DIR}/backup ${USERSIDE_BASE_DIR}/userside
	@test -f ${USERSIDE_BASE_DIR}/userside/.env || echo "" >> ${USERSIDE_BASE_DIR}/userside/.env
	@test -f ${USERSIDE_BASE_DIR}/userside/installer.json || \
		echo "{\"stability\": \"dev\", \"pgsql_dsn\": \"pgsql:host=postgres;dbname=${POSTGRES_DB};port=5432;username=${POSTGRES_USER};password=${POSTGRES_PASSWORD}\",\"redis_url\": \"redis://${REDIS_PASSWORD}@redis\",\"rabbit_url\": \"amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/%2f\"}" > \
		${USERSIDE_BASE_DIR}/userside/installer.json

us-install:
	docker-compose -p ${PROJECT_NAME} run --rm php /app/userside_install.sh install

us-repair:
	docker-compose -p ${PROJECT_NAME} run --rm php /app/userside_install.sh repair

us-cache-flush:
	docker-compose -p ${PROJECT_NAME} run --rm php php userside cache/flush-all

####

postgres-psql:
	docker-compose -p ${PROJECT_NAME} exec postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}

postgres-postgis-update:
	docker-compose -p ${PROJECT_NAME} exec postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "ALTER EXTENSION postgis UPDATE"

####

backup:
	docker-compose -p ${PROJECT_NAME} exec postgres /app/backup.sh
	docker-compose -p ${PROJECT_NAME} run --rm php /app/backup.sh

dbrestore:
	docker-compose -p ${PROJECT_NAME} exec postgres /app/restore.sh ${DUMP}

####

define CRON_TASKS
* * * * *    root    docker run --rm -t ${PROJECT_NAME}_php_1 php userside cron > /dev/null 2>&1
0 3 * * *    root    docker run --rm ${PROJECT_NAME}_php_1 /app/backup.sh > /dev/null 2>&1
0 4 * * *    root    docker exec ${PROJECT_NAME}_postgres_1 /app/backup.sh > /dev/null 2>&1
endef
export CRON_TASKS

cron-setup:
	@echo "Add crontab tasks:"
	@echo "$$CRON_TASKS" | sudo tee /etc/cron.d/${PROJECT_NAME}

cron-run:
	docker-compose -p ${PROJECT_NAME} run --rm php php userside cron

cron-remove:
	sudo rm -f /etc/cron.d/${PROJECT_NAME}

####

confirmation:
	@( read -p "This action will DELETE all data of ${PROJECT_NAME}!!! Are you sure? [y/N]: " sure && case "$$sure" in [yY]) true;; *) false;; esac )

need-restart:
	@echo ""
	@echo "\e[1m\e[31mThe USERSIDE bundle need to be restart!\e[0m\n"
	@echo ""
	@echo "Please run:"
	@echo ""
	@echo "    \033[1msudo make restart\033[0m"
	@echo ""
	@echo ""